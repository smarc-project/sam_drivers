<launch>

  <arg name="debug" default="0"/>
  <arg name="mode" default="default"/>
  <arg name="namespace" default="sam"/>
  <let name="gps_port" value="/dev/ttyACM1"/>
  <let name="gps_baud" value="115200"/>

  <arg name="with_gps" default="true"/>
  <arg name="uav_can_interface" default="can0"/>


  <group>
    <push-ros-namespace namespace="$(var namespace)"/>

    <node name="joint_state_publisher" pkg="joint_state_publisher" exec="joint_state_publisher" respawn="true" output="screen">
      <param name="use_gui" value="false"/>
      <param name="source_list" value="\'/sam/command_states\';" value-sep=";"/>
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" exec="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" 
           value="$(find-pkg-prefix xacro)/xacro '/$(var namespace)/$(find-pkg-prefix sam_description)/robots/sam_auv_$(var mode).urdf.xacro' debug:=$(var debug) namespace:=$(var namespace)" />
    </node>

    <!-- SBG IMU driver -->
    <node name="sbg_ellipseA" pkg="sbg_driver" exec="sbg_device" output="screen">
      <param from="$(find-pkg-prefix sbg_driver)/config/ellipse_A_sam.yaml" />
    </node>
    
    <node pkg="sbg_driver" name="sbg_2_ros" exec="sbg_to_ros.py" output="screen">
		  <param name="sbg_imu_data" value="/$(var namespace)/sbg/imu_data"/>
		  <param name="sbg_ekf_quat" value="/$(var namespace)/sbg/ekf_quat"/>
		  <param name="sbg_mag" value="/$(var namespace)/sbg/mag"/>
		  <param name="sbg_utc_time" value="/$(var namespace)/sbg/utc_time"/>
		  <param name="sbg_frame" value="$(var namespace)/sbg_link"/>
		  <param name="sbg_imu_out" value="/$(var namespace)/core/sbg_imu"/>
	  </node>

    <!-- STIM300 IMU driver -->
    <node name="stim300driver" output="screen" pkg="driver_stim300" exec="stim300_driver_node" namespace="core">
    	<param name = "device_name" value="/dev/ttyUSB0"/>
    	<param name = "stanard_deviation_of_gyro" value="0.0004"/>
    	<param name = "stanard_deviation_of_acc" value="0.004"/>
    	<param name = "imu_output" value="/$(var namespace)/core/imu"/>
    	<param name = "imu_frame" value="$(var namespace)/imu_link"/>
    	<param name = "sample_rate" value="125"/>
    </node>

    <!-- DV DVL
    <node pkg="deepvision_dvl_driver" exec="dvl_driver.py" name="dvl_driver" output="screen" namespace="core">
      <param name="dvl_topic" value="/$(var namespace)/core/dvl"/>
      <param name="dvl_raw_topic" value="/$(var namespace)/core/dvl_raw_output"/>
      <param name="dvl_frame" value="$(var namespace)/dvl_link"/>
      <param name="dvl_on_off_srv" value="/$(var namespace)/core/toggle_dvl"/>
    </node> -->

    <node pkg="waterlinked_a50_ros_driver" exec="dvl_driver.py" name="dvl_driver" output="screen">
        <param name="dvl_topic" value="/$(var namespace)/core/dvl"/>
        <param name="dvl_raw_topic" value="/$(var namespace)/core/dvl_raw_output"/>
        <param name="dvl_frame" value="$(var namespace)/dvl_link"/>
        <param name="dvl_on_off_srv" value="/$(var namespace)/core/dvl/toggle_dvl"/>

        <param name="relay_topic" value="/$(var namespace)/core/dvl_relay"/>

        <param name="ip" value="192.168.2.95"/>
        <param name="port" value="16171"/>
    
    </node>

    <node pkg="sam_drivers" exec="sam_startup_check.py" name="startup_check" output="screen">
       <remap from="~lcg_cmd" to="/$(var namespace)/core/lcg_cmd"/>
       <remap from="~vbs_cmd" to="/$(var namespace)/core/vbs_cmd"/>
    </node>
    <node pkg="sam_drivers" exec="sam_joint_state_converter.py" name="sam_joint_state_converter" output="screen">
       <remap from="~rpm_cmd" to="/$(var namespace)/core/rpm_cmd"/>
       <remap from="~thrust_vector_cmd" to="/$(var namespace)/core/thrust_vector_cmd"/>
    </node>

    <!-- Node that enables us to disable the DVL in order to get GPS fixes to update DR -->
    <!-- <node pkg="sam_actions" exec="gps_fix_server.py" name="gps_fix_server" output="screen"/> -->

    <node pkg="nmea_navsat_driver" exec="nmea_serial_driver" name="navsat" respawn="true" if="$(var with_gps)" namespace="core">
      <param name="port" value="$(var gps_port)"/>
      <param name="baud" value="$(var gps_baud)"/>
      <param name="frame_id" value="$(var namespace)/gps_link"/>
      <remap from="fix" to="gps"/>
    </node>
    
  </group>
       
    <include file="$(find-pkg-prefix sam_uavcan_bridge)/launch/bridge.launch">
      <arg name="uav_can_interface" value="$(var uav_can_interface)"/>
    </include>

    <include file="$(find-pkg-prefix message_joiner)/launch/joiner.launch">
      <!-- <arg name="joiner_publish_frequency" value="$(var joiner_publish_frequency)"/> -->
      <arg name="uav_can_interface" value="$(var uav_can_interface)"/>
    </include>
  <!-- <node pkg="flexxros" exec="sam_controls.py" name="sam_controls_interface" output="screen"/> -->


</launch>
